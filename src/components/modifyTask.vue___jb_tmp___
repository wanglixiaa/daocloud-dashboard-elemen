<template>
  <div>
    <el-dialog
      title="编辑xxx测试任务"
      :visible.sync="modifyTaskDialogVisible"
      width="60%"
      center>
      <div class="content">
        <ul>
          <li @click="confirmTag(item)" v-for="item in setting" :key="item.id">{{item.name}}</li>
        </ul>
        <div>
          <keep-alive>
            <component @updateTaskInfo='updateTaskInfo' :taskIndex='taskIndex' :tasks="tasks" :stageIndex="stageIndex" :is="currentComponent"></component>
          </keep-alive>
        </div>
      </div>
      <span slot="footer" class="dialog-footer">
        <!--<el-button @click="cancel()">取 消</el-button>-->
        <el-button @click="handel('ok',$event)">取 消</el-button>
        <el-button type="primary" @click="saving()">保存</el-button>
      </span>
    </el-dialog>
  </div>
</template>
<script>
import modifyTasks from '@/components/modifyTasks'
import TriggeringConditions from '@/components/TriggeringConditions'
import dependence from '@/components/dependence'
import modifySetting from '@/components/modifySetting'
export default {
  data() {
    return {
      modifyTaskDialogVisible: false,
      currentComponent: modifyTasks,
      updatedTaskForm: {},
      setting: [
        { name: '任务', component: modifyTasks },
        { name: '触发条件', component: TriggeringConditions },
        { name: '依赖', component: dependence },
        { name: '设置', component: modifySetting }
      ]
    }
  },
  props: ['modifyTaskDialog', 'taskIndex', 'stageIndex', 'tasks'],
  created() {
    console.log(this.taskIndex, this.stageIndex, this.tasks)
  },
  watch: {
    modifyTaskDialog: function(val, oldVal) {
      this.modifyTaskDialogVisible = !this.modifyTaskDialogVisible
    }
  },
  methods: {
    confirmTag(item) {
      this.currentComponent = item.component
    },
    cancel() {
      this.$emit('closeModifyTaskDialog')
    },
    // saving() {
    //   this.$emit('closeModifyTaskDialog')
    // },
    saving() {
      console.log(this.updatedTaskForm)
      var newTaskForm = {}
      this.updatedTaskForm.forEach(item => {
        if (item.type === 'strlist') {
          newTaskForm[item.id] = item.default.split('\n')
        } else {
          newTaskForm[item.id] = item.default
        }
      })
      newTaskForm.name = this.updatedTaskForm.name
      newTaskForm.job_type = this.taskType
      newTaskForm.stage = this.stageName
      this.axios
        .put(
          `https://api.daocloud.io/v1/ship/project/${
            this.$route.params.id
          }/flow/${this.updatedTaskForm.name}`,
          newTaskForm
        )
        .then(res => {
          this.$emit('ex', 'ProcessDefinition')
        })
    },
    updateTaskInfo(form) {
      this.updatedTaskForm = form
    },
    handel(gg, event) {
      console.log(event)
    }
  }
}
</script>
<style lang="scss" scoped>
.content {
  display: flex;
}
</style>
